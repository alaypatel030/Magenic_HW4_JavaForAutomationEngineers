TODO HOMEWORK CHECKLIST:
PROGRAMMING TASKS:
    SongDatabase.java
        [X] Complete the 'addSong' method
        [X] Throw an IllegalArgumentException when a playlist of the given name already exists in the 'createPlaylist' method
        [X] Complete the 'getPlaylist' method
        [X] Complete the 'addSongToPlaylist' method
        [X] Complete the 'findSongByName' method
        [X] Complete the 'findSongByArtist' method
    MP3Player.java
        [X] Run the 'main' method and try multiple work flows

TEST TASKS:
    SongDatabaseTest.java
        [X] Write the 'testAddDeleteSong' test method
        [X] Write the 'testAddGetDeletePlaylist' test method
        [X] Run every other test

SHORT ANSWERS:
    // TODO FOR HOMEWORK: Answer each question, and note many don't have a 'right answer' so just answer honestly
    [X] The MP3Player is a console application, what features do you wish were added?
        // ANSWER HERE: Add a feature to auto play next song if no user input gets done by user.

    [X] Pick any feature you mentioned in the last question. Do you think you could implement that feature with your current knowledge? If yes explain the basic thought processing of adding that feature, if not explain why.
        // ANSWER HERE: Add a for loop which sleeps for a second and wait until max timeout. For loop also contains scanner listener with condition if it catches user's action then it would break the loop and performs the expected action.
        If No action gets scanned by scanner then it would play next song once for loop reaches  to max timeout and reset loop for new song. 

    [X] What is a loop?
        // ANSWER HERE: A characteristic which performs the execution of instructions in repeated manner for given boolean condition.

    [X] Write what each of these loops does in your own words:
        // FOR LOOP: Efficiently iterates through instruction in repeated manner for specified number of times. 
        // WHILE LOOP: Performs instruction in repeated manner until it satisfies specified boolean condition. 
                       Here specified boolean condition gets tested at the beginning and runs inner instructions ONLY when it satisfies specified boolean condition.
        // DO WHILE:  Iterates through a part of an instruction specified under "do" until it satisfies specified condition. 
                      Here specifies boolean condition gets tested at the end and instruction will runs at least ones even if specified boolean condition gets failed in initial run.  

    [X] Why were 'infinite loops' used in this project? (See UserHelperMethods.displayOptionsAndWaitForValidOption(String[] options) for a reference)
        // ANSWER HERE:  the reason for this project to use 'infinite loops' because we would not want the program to terminate.
        We would want to have this console based interactive program which delivers output based on user input. 

    [X] This project has 3 packages (modelyhs, resources, and utils). Describe each one.
        // MODELS: consist of a various modular part of the program consist of MP3Player (main executable program), Song and SongDatabase for manipulating playlists and managing Song directory.
        // RESOURCES: holds OptionsSting which enables debug , manage and update expected menu options for respective actions with ease.
        // UTILS: contains UserHelperMehod class which allows classes under models to print expected output in the console. 